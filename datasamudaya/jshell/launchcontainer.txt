import com.github.datasamudaya.common.*;
import com.github.datasamudaya.stream.*;
import org.jooq.lambda.tuple.*;
import java.util.*;
import java.util.concurrent.*;
import com.esotericsoftware.kryo.io.Output;

org.burningwave.core.assembler.StaticComponentContainer.Modules.exportAllToAll();
PipelineConfig pc = new PipelineConfig();
Utils.loadLog4JSystemProperties("../config/","datasamudaya.properties");
pc.setBlocksize("64");
pc.setNumberofcontainers("1");
pc.setMaxmem("1024");
pc.setMinmem("1024");
pc.setLocal("true");
pc.setJgroups("false");
pc.setMesos("false");
pc.setYarn("false");
pc.setOutput(new Output(System.out));
pc.setIsblocksuserdefined("true");
pc.setBlocksize("64");
pc.setMode(DataSamudayaConstants.MODE_NORMAL);
Resources resources = new Resources();
resources.setNumberofprocessors(12);
resources.setFreememory(4294967296l);
ConcurrentMap<String,Resources> mapres = new ConcurrentHashMap<>();
mapres.put("127.0.0.1_12122",resources);
resources.setNodeport("127.0.0.1_12122");
DataSamudayaNodesResources.put(mapres);
var lc = Utils.launchContainers(1);
Utils.destroyContainers(lc);