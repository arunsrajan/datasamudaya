akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-config-on-start = on
  log-dead-letters = 10
  log-dead-letters-during-shutdown = on
  logger-startup-timeout = 30s
  serialization-message-maximum-size = 500 MiB
  actor {
	fifo-mailbox {
	  mailbox-type = "akka.dispatch.BoundedControlAwareMailbox"
	  mailbox-capacity = 100000
	  mailbox-push-timeout-time = 120s
	}
	mailbox {
	  requirements{
		"akka.dispatch.BoundedMessageQueueSemantics" = fifo-mailbox
	  }
	}
    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
      autoreceive = on
	  unhandled = on
    }
    allow-java-serialization = off
    provider = "cluster"	
	serializers {
	  java = "akka.serialization.JavaSerializer"
      proto = "akka.remote.serialization.ProtobufSerializer"
	  kryo = "io.altoo.akka.serialization.kryo.KryoSerializer"
    }
	serialization-bindings {
	  "com.github.datasamudaya.common.utils.DiskSpillingList" = kryo
      "com.google.protobuf.Message" = proto
	  "com.github.datasamudaya.common.ShuffleBlock" = kryo
	  "com.github.datasamudaya.common.OutputObject" = kryo
	}
  }
  remote {
    artery {
      enabled = on
	  log-received-messages = on
	  log-frame-size-exceeding = 5MiB
      canonical.hostname = "%s"
      canonical.port = %s
	  large-message-destinations = ["/user/*"]
      advanced {
        maximum-frame-size = 5MiB
        buffer-pool-size = 128
        maximum-large-frame-size = 130MiB
        large-buffer-pool-size = 32
      }
    }
  }
  cluster {
    seed-nodes = ["akka://RemoteActor@%s:%s"]				  
  }  
}
akka-kryo-serialization {
	  resolve-subclasses = true
	  kryo-initializer = "com.github.datasamudaya.common.utils.AkkaKryoInitializer"
}